// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package messageapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Id                   string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Content              string               `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=Time,proto3" json:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type User struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Connect struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Connect) Reset()         { *m = Connect{} }
func (m *Connect) String() string { return proto.CompactTextString(m) }
func (*Connect) ProtoMessage()    {}
func (*Connect) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *Connect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connect.Unmarshal(m, b)
}
func (m *Connect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connect.Marshal(b, m, deterministic)
}
func (m *Connect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connect.Merge(m, src)
}
func (m *Connect) XXX_Size() int {
	return xxx_messageInfo_Connect.Size(m)
}
func (m *Connect) XXX_DiscardUnknown() {
	xxx_messageInfo_Connect.DiscardUnknown(m)
}

var xxx_messageInfo_Connect proto.InternalMessageInfo

func (m *Connect) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Connect) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Close struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Close) Reset()         { *m = Close{} }
func (m *Close) String() string { return proto.CompactTextString(m) }
func (*Close) ProtoMessage()    {}
func (*Close) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}

func (m *Close) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Close.Unmarshal(m, b)
}
func (m *Close) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Close.Marshal(b, m, deterministic)
}
func (m *Close) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Close.Merge(m, src)
}
func (m *Close) XXX_Size() int {
	return xxx_messageInfo_Close.Size(m)
}
func (m *Close) XXX_DiscardUnknown() {
	xxx_messageInfo_Close.DiscardUnknown(m)
}

var xxx_messageInfo_Close proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Message)(nil), "messageapi.Message")
	proto.RegisterType((*User)(nil), "messageapi.User")
	proto.RegisterType((*Connect)(nil), "messageapi.Connect")
	proto.RegisterType((*Close)(nil), "messageapi.Close")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x43, 0x83, 0x45, 0xa7, 0x5a, 0x75, 0x4c, 0x0c, 0xe1, 0x62, 0x43, 0x3c, 0x34, 0x1e,
	0xb6, 0x06, 0x4f, 0x7a, 0x94, 0x83, 0xe9, 0xc1, 0x0b, 0xad, 0x0f, 0xb0, 0x85, 0x91, 0x90, 0x74,
	0x59, 0xb2, 0x3b, 0xed, 0x2b, 0xf8, 0xda, 0xa6, 0xcb, 0x12, 0x6d, 0xf4, 0xc6, 0xcc, 0xfc, 0xf3,
	0x7d, 0xcc, 0xc2, 0x85, 0x22, 0x6b, 0x65, 0x4d, 0xa2, 0x33, 0x9a, 0x35, 0x82, 0x2f, 0x65, 0xd7,
	0x24, 0x77, 0xb5, 0xd6, 0xf5, 0x96, 0x16, 0x6e, 0xb2, 0xd9, 0x7d, 0x2e, 0xb8, 0x51, 0x64, 0x59,
	0xaa, 0xae, 0x0f, 0xa7, 0x25, 0x44, 0xef, 0x7d, 0x1c, 0xa7, 0x30, 0x5a, 0x56, 0x71, 0x30, 0x0b,
	0xe6, 0x67, 0xc5, 0x68, 0x59, 0x61, 0x0c, 0x51, 0xae, 0x5b, 0xa6, 0x96, 0xe3, 0x91, 0x6b, 0x0e,
	0x25, 0x0a, 0x08, 0xd7, 0x8d, 0xa2, 0x38, 0x9c, 0x05, 0xf3, 0x49, 0x96, 0x88, 0x5e, 0x22, 0x06,
	0x89, 0x58, 0x0f, 0x92, 0xc2, 0xe5, 0xd2, 0x07, 0x08, 0x3f, 0x2c, 0x99, 0x3f, 0x06, 0x84, 0xb0,
	0x95, 0x8a, 0x3c, 0xde, 0x7d, 0xa7, 0x6f, 0xce, 0xda, 0x52, 0xc9, 0x78, 0x0f, 0xe1, 0xce, 0x92,
	0x71, 0x0b, 0x93, 0xec, 0x4a, 0xfc, 0xdc, 0x25, 0x0e, 0xb8, 0xc2, 0x4d, 0xf1, 0x16, 0xc6, 0xb2,
	0xe4, 0x66, 0xdf, 0x63, 0x4e, 0x0b, 0x5f, 0xa5, 0x11, 0x9c, 0xe4, 0x5b, 0x6d, 0x29, 0xfb, 0x0a,
	0x60, 0xea, 0x6f, 0x5c, 0x91, 0xd9, 0x37, 0x25, 0xe1, 0x0b, 0x9c, 0xe7, 0x86, 0x24, 0xd3, 0x8a,
	0x0d, 0x49, 0x85, 0x37, 0xbf, 0xd9, 0x5e, 0x9f, 0x1c, 0x35, 0x3d, 0xe0, 0x31, 0xc0, 0x67, 0xb8,
	0x7c, 0x35, 0x5a, 0x56, 0xa5, 0xb4, 0xfc, 0xdf, 0xba, 0x4f, 0x26, 0xd7, 0x47, 0xcc, 0xc3, 0x9f,
	0x6c, 0xc6, 0xee, 0x85, 0x9e, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x74, 0x87, 0x52, 0xb1,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageServiceClient interface {
	// CreateStream is used to open the client message stream
	CreateStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (MessageService_CreateStreamClient, error)
	// BroadcastStream takes each message and returns it to the client to be used for display
	BroadcastStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) CreateStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (MessageService_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[0], "/messageapi.MessageService/CreateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_CreateStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageServiceCreateStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceCreateStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) BroadcastStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/messageapi.MessageService/BroadcastStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
type MessageServiceServer interface {
	// CreateStream is used to open the client message stream
	CreateStream(*Connect, MessageService_CreateStreamServer) error
	// BroadcastStream takes each message and returns it to the client to be used for display
	BroadcastStream(context.Context, *Message) (*Close, error)
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Connect)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).CreateStream(m, &messageServiceCreateStreamServer{stream})
}

type MessageService_CreateStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageServiceCreateStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceCreateStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_BroadcastStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).BroadcastStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageapi.MessageService/BroadcastStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).BroadcastStream(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messageapi.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastStream",
			Handler:    _MessageService_BroadcastStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStream",
			Handler:       _MessageService_CreateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
